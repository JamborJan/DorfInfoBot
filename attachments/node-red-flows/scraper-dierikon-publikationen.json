[
    {
        "id": "03f95de05b0526a3",
        "type": "comment",
        "z": "bd26b2ede712f138",
        "name": "Dierikon Publikationen",
        "info": "",
        "x": 140,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f03cb06aebd4cee0",
        "type": "inject",
        "z": "bd26b2ede712f138",
        "name": "Start 1h",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 1400,
        "wires": [
            [
                "7a5e23688df413a1"
            ]
        ]
    },
    {
        "id": "7a5e23688df413a1",
        "type": "http request",
        "z": "bd26b2ede712f138",
        "name": "GET Baugesuche",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.dierikon.ch/publikationen",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 310,
        "y": 1400,
        "wires": [
            [
                "f234b2ed77845270"
            ]
        ]
    },
    {
        "id": "69b7e5434b76e17c",
        "type": "function",
        "z": "bd26b2ede712f138",
        "name": "Convert JSON object",
        "func": "/*\n\nRequired JSON structure:\n    \n    {\n        \"title\": \"API title with attachment 2\", \n        \"description\": \"API description\",\n        \"dateOriginalPost\": \"2021-08-22\",\n        \"linkOriginalPost\": \"https://jambor.pro\"\n    }\n\nRegex test Tool: https://regex101.com/\n\nRegex for URL from <a> Tag\n- Source: https://stackoverflow.com/questions/15926142/regular-expression-for-finding-href-value-of-a-a-link\n- RegEx: <a\\s+(?:[^>]*?\\s+)?href=([\"'])(.*?)\\1\n\nKEY Feld:\n- Trim\n- Hash > MD5 nicht m√∂glich einfach so\n\n*/\n\nconst stringUrlRegex = new RegExp('<a\\\\s+(?:[^>]*?\\\\s+)?href=([\"\\'])(.*?)\\\\1');\nconst stringTitleRegex = new RegExp('>(.*?)(?=<\\/a>)');\n\nvar title = stringTitleRegex.exec(msg.payload.name)[1];\nvar dateOriginalPost = msg.payload.datum;\nvar uniqueKey = dateOriginalPost.trim()+title.trim();\nvar dayOriginalPost = dateOriginalPost.slice(0, 2);\nvar monthOriginalPost = dateOriginalPost.slice(3, 5); \nvar yearOriginalPost = dateOriginalPost.slice(6, 10);\ndateOriginalPost = new Date(yearOriginalPost, monthOriginalPost-1, dayOriginalPost);\n//dateOriginalPost = yearOriginalPost+'/'+monthOriginalPost+'/'+dayOriginalPost;\n\nvar newPayload = {};\nnewPayload[\"title\"] = \"Neue Publikation aus dem Gemeindehaus Dierikon\";\nnewPayload[\"description\" ] = title;\nnewPayload[\"dateOriginalPost\"] = dateOriginalPost;\nnewPayload[\"linkOriginalPost\"] = \"https://www.dierikon.ch\" + stringUrlRegex.exec(msg.payload.name)[2];\nnewPayload[\"externalKey\"] = uniqueKey;\nmsg.payload = newPayload;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "b1cebcc6abd0e6bb"
            ]
        ]
    },
    {
        "id": "97f78d3e75bd5fde",
        "type": "switch",
        "z": "bd26b2ede712f138",
        "name": "Filter empty object",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "privatKategorie",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "_thumbnail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "_downloadBtn",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 610,
        "y": 1500,
        "wires": [
            [],
            [],
            [],
            [
                "ef9a230ff86fc495"
            ]
        ]
    },
    {
        "id": "6ae16c5ab86a6adf",
        "type": "split",
        "z": "bd26b2ede712f138",
        "name": "Split JSON objects",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 390,
        "y": 1500,
        "wires": [
            [
                "97f78d3e75bd5fde"
            ]
        ]
    },
    {
        "id": "f234b2ed77845270",
        "type": "html",
        "z": "bd26b2ede712f138",
        "name": "Extract <table>",
        "property": "payload",
        "outproperty": "payload",
        "tag": "table",
        "ret": "attr",
        "as": "single",
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "385399776bc8d997"
            ]
        ]
    },
    {
        "id": "385399776bc8d997",
        "type": "function",
        "z": "bd26b2ede712f138",
        "name": "Extract [\"data-entities\"]",
        "func": "/*\n* https://www.java-blog-buch.de/0303-nuetzliche-string-methoden/\n*/\n\nmsg.payload = msg.payload[0][\"data-entities\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1400,
        "wires": [
            [
                "1c9377c827f81db1"
            ]
        ]
    },
    {
        "id": "1c9377c827f81db1",
        "type": "json",
        "z": "bd26b2ede712f138",
        "name": "Convert JSON Object",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 160,
        "y": 1500,
        "wires": [
            [
                "6ae16c5ab86a6adf"
            ]
        ]
    },
    {
        "id": "81456347d73623af",
        "type": "comment",
        "z": "bd26b2ede712f138",
        "name": "do nothing when [0]",
        "info": "",
        "x": 810,
        "y": 1480,
        "wires": []
    },
    {
        "id": "ef9a230ff86fc495",
        "type": "split",
        "z": "bd26b2ede712f138",
        "name": "Split into single new objects",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 180,
        "y": 1600,
        "wires": [
            [
                "69b7e5434b76e17c"
            ]
        ]
    },
    {
        "id": "b1cebcc6abd0e6bb",
        "type": "split",
        "z": "bd26b2ede712f138",
        "name": "Split into elements",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 670,
        "y": 1600,
        "wires": [
            [
                "551d0679f10c10e7"
            ]
        ]
    },
    {
        "id": "551d0679f10c10e7",
        "type": "switch",
        "z": "bd26b2ede712f138",
        "name": "Seperate externalKey",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "externalKey",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "externalKey",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 1740,
        "wires": [
            [
                "37e6c3667c884995"
            ],
            [
                "aa4db863b3ab9bcf"
            ]
        ]
    },
    {
        "id": "37e6c3667c884995",
        "type": "hash sha256",
        "z": "bd26b2ede712f138",
        "name": "SHA265 externalKey",
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "aa4db863b3ab9bcf"
            ]
        ]
    },
    {
        "id": "aa4db863b3ab9bcf",
        "type": "join",
        "z": "bd26b2ede712f138",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 1740,
        "wires": [
            [
                "d17ea156c46bf379"
            ]
        ]
    },
    {
        "id": "d17ea156c46bf379",
        "type": "http request",
        "z": "bd26b2ede712f138",
        "name": "POST news entries to API",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-dib.k8s-tst.jambor.pro/api/news",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "basic",
        "x": 450,
        "y": 1840,
        "wires": [
            [
                "da5c28b8d7c5c781"
            ]
        ]
    },
    {
        "id": "96093061d2f96720",
        "type": "debug",
        "z": "bd26b2ede712f138",
        "name": "log to stdout",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "\"[http: \"&statusCode&\"] [node: \"&topic&\"]\"&payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1840,
        "wires": []
    },
    {
        "id": "da5c28b8d7c5c781",
        "type": "change",
        "z": "bd26b2ede712f138",
        "name": "Set Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Dierikon Publikationen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1840,
        "wires": [
            [
                "96093061d2f96720"
            ]
        ]
    }
]